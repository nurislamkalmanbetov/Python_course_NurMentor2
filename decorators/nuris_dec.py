# # Определение декоратора
# def my_decorator(func):
#     def wrapper():
#         print("Декоратор выполняется")
#         func()
#     return wrapper

# # Использование декоратора
# @my_decorator
# def say_hello():
#     print("Привет!")

# # Вызов функции
# say_hello()

# _________________________________________________________________________


# Определение декоратора
# def my_decorator(func):
#     def wrapper():
#         print("Что-то происходит перед вызовом функции")
#         func()  # Вызов функции, переданной в качестве аргумента
#         print("Что-то происходит после вызова функции")
#     return wrapper

# # Использование декоратора
# @my_decorator
# def say_hello():
#     print("Привет, мир!")

# # Вызов функции, обернутой в декоратор
# say_hello()

# _________________________________________________________________________

# Определение декоратора
# def print_function_name(func):
#     def wrapper(*args, **kwargs):
#         print(f"Выполняется функция: {func.__name__}")
#         return func(*args, **kwargs)
#     return wrapper

# # Использование декоратора
# @print_function_name
# def greet(name):
#     print(f"Привет, {name}!")

# # Вызов функции
# greet("Миша")
# _________________________________________________________________________





