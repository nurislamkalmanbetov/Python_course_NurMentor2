SQL 

DDL (Data Definition Language) - Язык определения данных. Эти запросы используются 
для создания, изменения и удаления структуры базы данных и ее объектов, таких как 
таблицы, индексы и представления. 
Примеры команд DDL включают CREATE TABLE, ALTER TABLE и DROP TABLE.

DML (Data Manipulation Language): Язык манипулирования данными. Эти запросы 
используются для добавления, изменения, удаления и выборки данных из таблиц. 
Основные операции DML включают INSERT, UPDATE, DELETE и SELECT.

DCL (Data Control Language): Язык управления данными. Эти запросы 
используются для управления правами доступа к данным в базе данных. Операции 
DCL включают GRANT (предоставление прав доступа) и REVOKE (отзыв прав доступа).

TCL (Transaction Control Language): Язык управления транзакциями. 
Эти запросы используются для управления транзакциями в базе данных, 
такими как начало транзакции, 
фиксация изменений и откат транзакции. Операции TCL включают COMMIT и ROLLBACK.

________________________________________________________________________________

1) CREATE DATABASE company;
2) USE company;
3) CREATE TABLE positions (
    position_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT
);

4) CREATE TABLE employers (
    employer_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    location VARCHAR(255),
    industry VARCHAR(255)
);

5) CREATE TABLE employees (
    employee_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    position_id INT,
    employer_id INT,
    FOREIGN KEY (position_id) REFERENCES positions(position_id),
    FOREIGN KEY (employer_id) REFERENCES employers(employer_id)
);

6) INSERT INTO positions (title, description) VALUES
('Software Developer', 'Develops software applications.'),
('Marketing Manager', 'Manages marketing campaigns.'),
('HR Specialist', 'Handles human resources tasks.');

7) INSERT INTO employers (name, location, industry) VALUES
('ABC Corporation', 'New York', 'Technology'),
('XYZ Inc.', 'Los Angeles', 'Entertainment'),
('123 Industries', 'Chicago', 'Manufacturing');

8) INSERT INTO employees (first_name, last_name, position_id, employer_id) VALUES
('John', 'Doe', 1, 1),
('Jane', 'Smith', 2, 2),
('Mike', 'Johnson', 3, 3);
________________________________________________________________________________

CREATE TABLE salaries (
    salary_id INT AUTO_INCREMENT PRIMARY KEY,
    employee_id INT,
    amount DECIMAL(10, 2),
    start_date DATE,
    end_date DATE,
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)
);

INSERT INTO salaries (employee_id, amount, start_date, end_date) VALUES
(1, 5000.00, '2024-01-01', '2024-12-31'),
(2, 6000.00, '2024-02-01', '2024-12-31'),
(3, 5500.00, '2024-03-01', '2024-12-31');
_________________________________________________________

CREATE TABLE grafic_raboty (
    schedule_id INT AUTO_INCREMENT PRIMARY KEY,
    employee_id INT,
    start_time TIME,
    end_time TIME,
    work_date DATE,
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)
);

INSERT INTO work_schedule (employee_id, start_time, end_time, work_date) VALUES
(1, '09:00:00', '17:00:00', '2024-05-24'),
(2, '08:30:00', '16:30:00', '2024-05-24'),
(3, '10:00:00', '18:00:00', '2024-05-24');
________________________________

CREATE TABLE addresses (
    address_id INT AUTO_INCREMENT PRIMARY KEY,
    employee_id INT,
    address_line1 VARCHAR(255),
    address_line2 VARCHAR(255),
    city VARCHAR(255),
    state VARCHAR(255),
    postal_code VARCHAR(10),
    country VARCHAR(255),
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)
);

INSERT INTO addresses (employee_id, address_line1, address_line2, city, state, postal_code, country) VALUES
(1, '123 Main St', NULL, 'New York', 'NY', '10001', 'USA'),
(2, '456 Elm St', NULL, 'Los Angeles', 'CA', '90001', 'USA'),
(3, '789 Oak St', 'Apt 202', 'Chicago', 'IL', '60601', 'USA');
________________________________

1) SHOW TABLES; 
2) SELECT name FROM employers;
3) SELECT * FROM salaries;
4) SELECT employee_id, amount FROM salaries WHERE amount > 5000;
5) SELECT * FROM addresses;
6) SELECT * FROM employees; 
7) SELECT 
    e.first_name,
    e.last_name,
    a.address_line1,
    a.city,
    a.country
FROM 
    employees e
JOIN 
    addresses a ON e.employee_id = a.employee_id;
