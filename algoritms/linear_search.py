# # Поиск
# # Линейный поиск (Linear Search)
# ```
# def linear_search(arr, target):
#     """
#     Функция для линейного поиска элемента в массиве.
    
#     :param arr: Список элементов.
#     :param target: Искомый элемент.
#     :return: Индекс искомого элемента, если он найден, иначе -1.
#     """
#     for index, element in enumerate(arr):
#         if element == target:
#             return index  # Возвращаем индекс найденного элемента
#     return -1  # Если элемент не найден, возвращаем -1

# # Пример использования
# arr = [5, 3, 7, 1, 9, 2]
# target = 7

# index = linear_search(arr, target)

# if index != -1:
#     print(f"Элемент {target} найден на индексе {index}.")
# else:
#     print(f"Элемент {target} не найден в массиве.")
# ```

# # Итерация по массиву:
# # Используем цикл for для перебора всех элементов массива.
# # enumerate позволяет получать как индекс, так и значение элемента в каждой итерации.
# # Проверка каждого элемента:

# # В каждой итерации проверяем, равен ли текущий элемент искомому (target).
# # Если да, возвращаем индекс найденного элемента.
# # Возврат результата:

# # Если элемент найден, функция возвращает его индекс.
# # Если элемент не найден после проверки всех элементов, функция возвращает -1.

# ________________________________________________________________________

#  Бинарный поиск (Binary Search)

# import time

# def binary_search(arr, target):
#     """
#     Функция для бинарного поиска элемента в отсортированном массиве.
    
#     :param arr: Отсортированный список элементов.
#     :param target: Искомый элемент.
#     :return: Индекс искомого элемента, если он найден, иначе -1.
#     """
#     left, right = 0, len(arr) - 1
    
#     while left <= right:
#         mid = (left + right) // 2  # Находим середину текущего подмассива
#         if arr[mid] == target:
#             return mid  # Элемент найден, возвращаем его индекс
#         elif arr[mid] < target:
#             left = mid + 1  # Искомый элемент находится в правой половине
#         else:
#             right = mid - 1  # Искомый элемент находится в левой половине
    
#     return -1  # Элемент не найден, возвращаем -1

# # Пример использования
# arr = [1, 3, 5, 7, 9, 11, 13, 15]
# target = 7


# # Измерение времени выполнения
# start_time = time.time()  # Запоминаем начальное время # после на время проверяем 
# index = binary_search(arr, target)
# end_time = time.time()  # Запоминаем конечное время    # после на время проверяем 

# # после на время проверяем
# elapsed_time_ms = (end_time - start_time) * 1000  # Вычисляем время выполнения в миллисекундах

# if index != -1:
#     print(f"Элемент {target} найден на индексе {index}.")
# else:
#     print(f"Элемент {target} не найден в массиве.")

# # после на время проверяем
# print(f"Время выполнения: {elapsed_time_ms:.3f} миллисекунд")
