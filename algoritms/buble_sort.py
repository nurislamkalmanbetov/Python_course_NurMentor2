# Пузырьковая сортировка (Bubble Sort)
# ```
# def bubble_sort(arr):
#     n = len(arr)
#     for i in range(n):
#         # Последние i элементов уже на своем месте
#         for j in range(0, n-i-1):
#             # Проходим по списку и меняем местами элементы, если они в неправильном порядке
#             if arr[j] > arr[j+1]:
#                 arr[j], arr[j+1] = arr[j+1], arr[j]
#     return arr

# # Пример использования
# arr = [64, 34, 25, 12, 22, 11, 90]
# sorted_arr = bubble_sort(arr)
# print("Отсортированный массив:", sorted_arr)
# ```

# Пузырьковая сортировка — это простой алгоритм сортировки, 
# который повторно проходит по списку, сравнивая соседние 
# элементы и меняя их местами, если они находятся 
# в неправильном порядке. Проход по списку повторяется 
# до тех пор, пока список не будет отсортирован.

# __________________________________________________________ 

# Сортировка вставками (Insertion Sort)
# ```
# def insertion_sort(arr):
#     # Проходим по всем элементам массива
#     for i in range(1, len(arr)):
#         key = arr[i]
#         j = i - 1
#         # Перемещаем элементы arr[0..i-1], которые больше ключа, на одну позицию вперед
#         while j >= 0 and key < arr[j]:
#             arr[j + 1] = arr[j]
#             j -= 1
#         arr[j + 1] = key
#     return arr
# ```
# # Пример использования
# arr = [12, 11, 13, 5, 6]
# sorted_arr = insertion_sort(arr)
# print("Сортировка вставками, Отсортированный массив:", sorted_arr)

# __________________________________________________________ 

# Быстрая сортировка (Quick Sort)

# def quick_sort(arr):
#     # Базовый случай: если массив пустой или имеет один элемент, он уже отсортирован
#     if len(arr) <= 1:
#         return arr
    
#     # Выбираем опорный элемент
#     pivot = arr[len(arr) // 2]
    
#     # Разделяем массив на три части
#     left = [x for x in arr if x < pivot]
#     middle = [x for x in arr if x == pivot]
#     right = [x for x in arr if x > pivot]
    
#     # Рекурсивно применяем быструю сортировку к подмассивам и объединяем результаты
#     return quick_sort(left) + middle + quick_sort(right)

# # Пример использования
# arr = [3, 6, 8, 10, 1, 2, 1]
# sorted_arr = quick_sort(arr)
# print("Отсортированный массив:", sorted_arr)


# Объяснение работы алгоритма
# Выбор опорного элемента:

# В данном примере опорным элементом выбирается средний элемент массива (arr[len(arr) // 2]).
# Разделение массива:

# left содержит элементы, которые меньше опорного.
# middle содержит элементы, которые равны опорному.
# right содержит элементы, которые больше опорного.
# Рекурсия:

# Алгоритм рекурсивно применяется к подмассивам left и right.
# Соединяются отсортированные подмассивы и опорные элементы в один отсортированный массив.

# __________________________________________________________ 
